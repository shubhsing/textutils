{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setmystyle","btnText","setbtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","titleText","aboutText","toggle","htmlFor","TextForm","text","setText","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef429162.chunk.js","sourcesContent":["import React , {useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle, setmystyle] = useState({\r\n        color : 'black',\r\n        backgroundColor : 'white'\r\n    })\r\n    const [btnText, setbtnText] = useState('Enable Dark Mode')\r\n    const toggle = ()=>{\r\n        if (mystyle.color === 'black')\r\n        {\r\n          setmystyle({\r\n            color : 'white',\r\n            backgroundColor : 'black',\r\n            border : 'solid 1px white'\r\n          })\r\n          setbtnText('Enable light Mode')\r\n        }\r\n        else {\r\n          setmystyle({\r\n            color : 'black',\r\n            backgroundColor : 'white'\r\n          })\r\n          setbtnText('Enable Dark Mode')\r\n        }\r\n    }\r\n    return (\r\n        <div className='container my-3' style={mystyle}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\" style={mystyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n    <button type=\"button\" onClick={toggle} className=\"btn btn-primary my-2\">{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.titleText}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggle} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark-mode</label>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React , {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('Enter Text Here')\r\n    const clickHandler = ()=>{\r\n        // console.log(\"Upper casse was clicked\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to upper case','success')\r\n    }\r\n    const lowclickHandler = ()=>{\r\n        // console.log(\"Upper casse was clicked\" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to lower case','success')\r\n    }\r\n    \r\n    const handlechange = (event)=>{\r\n        // console.log(\"on handle\")\r\n        setText(event.target.value)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h1>Text Analyzer</h1>\r\n        <div>\r\n            <div className=\"mb-3\">\r\n                <textarea style={{backgroundColor : props.mode==='dark'?'#05386a':'white' , color : props.mode==='dark'?'white':'black' }} className=\"form-control\" onChange={handlechange}  value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={clickHandler}>Convert To UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={lowclickHandler}>Convert To LowerCase</button>\r\n            \r\n\r\n        </div>\r\n        </div>\r\n        <div className=\"container  my-3\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your Text Summary here</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} character</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes to read the text</p>\r\n            <h2>Preview text</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        \r\n          props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong> {props.alert.type} </strong> : {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        \r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1000);\n  }\n\n  const toggle = ()=>{\n    if (mode === 'light')\n    {\n    setMode('dark')\n    document.body.style.backgroundColor = '#05386a'\n    showAlert('Dark moode has been enabled',\"success\")\n  }\n  else{\n    setMode('light')\n    document.body.style.backgroundColor = 'white'\n    showAlert('Light moode has been enabled',\"success\")\n  }\n}\n  return (\n    <>\n    <Router>\n     <Navbar titleText=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggle={toggle}/>\n     <Alert alert={alert}/>\n     {/* <About/> */}\n     <div className=\"container\">\n     <Switch>\n          <Route exact path=\"/about\">\n            <About/>\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm mode={mode} showAlert={showAlert}/>\n          </Route>\n        </Switch>\n     \n     </div>\n     </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}